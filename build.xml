<?xml version="1.0" encoding="UTF-8"?>
<project name="Lab_OPI" default="build">

    <property file="build.properties" />

    <path id="libraries.ant.class.path">
        <fileset dir="${libraries.ant.path}" includes="*.jar" />
    </path>

    <!-- Add scp task -->
    <taskdef name="scp" classname="org.apache.tools.ant.taskdefs.optional.ssh.Scp" classpathref="libraries.ant.class.path" />
    <!-- /Add scp task -->

    <!-- Add junitlauncher task -->
    <taskdef name="junitlauncher" classname="org.apache.tools.ant.taskdefs.optional.junitlauncher.confined.JUnitLauncherTask" classpathref="libraries.ant.class.path" />
    <!-- /Add junitlauncher task -->

    <path id="libraries">
        <fileset dir="${libraries.compile.path}" includes="**/*.jar" erroronmissingdir="false" />
        <fileset dir="${libraries.provided.path}" includes="**/*.jar" erroronmissingdir="false" />
    </path>

    <path id="libraries.test">
        <path refid="libraries" />
        <fileset dir="${libraries.test.path}" includes="**/*.jar" erroronmissingdir="false" />
    </path>

    <target name="pismak">
        <exec executable="bash">
            <arg path="pismak/script.sh" />
            <arg path="${basedir}" />
        </exec>
    </target>

    <target name="compile" depends="pismak">
        <mkdir dir="${build.path}/classes" />

        <copy todir="${build.path}/classes">
            <fileset dir="${resources.path}" excludes="**/*.java" erroronmissingdir="false" />
        </copy>

        <javac destdir="${build.path}/classes" includeantruntime="false" classpathref="libraries">
            <src path="${sources.path}" />
        </javac>
    </target>

    <target name="jar" depends="compile">
        <jar destfile="${build.path}/${ant.project.name}-${project.version}.jar"
             basedir="${build.path}/classes" index="true" indexmetainf="true">

            <manifest>
                <attribute name="Main-Class" value="${main.class}" />
                <attribute name="Implementation-Version" value="${project.version}" />
            </manifest>
        </jar>
    </target>

    <target name="war" depends="compile">
        <property name="war.directory.path" value="${build.path}/${ant.project.name}-${project.version}_war" />

        <mkdir dir="${war.directory.path}" />
        <copy todir="${war.directory.path}">
            <fileset dir="${web.path}" erroronmissingdir="false" />
        </copy>

        <mkdir dir="${war.directory.path}/WEB-INF/classes" />
        <copy todir="${war.directory.path}/WEB-INF/classes">
            <fileset dir="${build.path}/classes" />
        </copy>

        <mkdir dir="${war.directory.path}/WEB-INF/lib" />
        <copy todir="${war.directory.path}/WEB-INF/lib">
            <fileset dir="${libraries.compile.path}" includes="**/*.jar" erroronmissingdir="false" />
        </copy>

        <war warfile="${build.path}/${ant.project.name}-${project.version}.war"
             webxml="${war.directory.path}/WEB-INF/web.xml">

            <fileset dir="${war.directory.path}" excludes="WEB-INF/web.xml" />
        </war>
    </target>

    <target name="build" depends="jar,war" />

    <target name="clean">
        <delete dir="${build.path}" />
    </target>

    <target name="run" depends="build">
        <java classname="${main.class}">
            <classpath refid="libraries" />

            <classpath>
                <pathelement location="${build.path}/${ant.project.name}-${project.version}.jar" />
            </classpath>

            <arg value="5" />
        </java>
    </target>

    <target name="compile.test" depends="compile">
        <mkdir dir="${build.path}/test-classes" />

        <copy todir="${build.path}/test-classes">
            <fileset dir="${resources.test.path}" excludes="**/*.java" erroronmissingdir="false" />
        </copy>

        <javac destdir="${build.path}/test-classes" includeantruntime="false"
               classpath="${build.path}/classes" classpathref="libraries.test">
            <src path="${sources.test.path}" />
        </javac>
    </target>

    <target name="test" depends="build,compile.test">
        <mkdir dir="${build.path}/reports" />

        <junitlauncher haltonfailure="true">
            <classpath refid="libraries.test" />

            <classpath>
                <pathelement location="${build.path}/classes" />
                <pathelement location="${build.path}/test-classes" />
            </classpath>

            <testclasses outputdir="${build.path}/reports">
                <fileset dir="${build.path}/test-classes" includes="**/*.class" />

                <listener type="legacy-xml" />
                <listener type="legacy-brief" sendSysOut="true" sendSysErr="true" />
            </testclasses>
        </junitlauncher>
    </target>

    <target name="scp" depends="build">
        <property file="remote.properties" />

        <scp file="${build.path}/${ant.project.name}-${project.version}.war"
             todir="${remote.username}@${remote.hostname}:${remote.directory.path}"
             password="${remote.password}" trust="true" port="${remote.port}" />
    </target>

    <target name="report" depends="test">
        <delete dir="${report.path}" />

        <mkdir dir="${report.path}" />
        <copy todir="${report.path}">
            <fileset dir="${build.path}/reports" includes="*.xml" />
        </copy>

        <exec executable="git">
            <arg value="add" />
            <arg path="${report.path}" />
        </exec>

        <exec executable="git">
            <arg value="commit" />
            <arg value="-m" />
            <arg value="${report.commit.msg}" />
        </exec>
    </target>
</project>
